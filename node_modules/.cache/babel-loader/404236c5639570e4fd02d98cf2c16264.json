{"ast":null,"code":"import { deepClone } from './context';\n/**\n * Current limitation:\n * - field path do not support array, 'a.b.c' only\n */\nexport function limitModification(object, modifiableFieldPaths, modifier) {\n  var clone = deepClone(object);\n  var result = modifier(clone);\n  modifiableFieldPaths.forEach(function (path) {\n    var originalValue = get(object, path);\n    var newValue = get(clone, path);\n    var originalType = getType(originalValue);\n    var newType = getType(newValue);\n    if (newType === originalType) {\n      set(object, path, newValue);\n    } else if (originalType === 'object' && (newType === 'undefined' || newType === 'null')) {\n      set(object, path, {});\n    }\n  });\n  return result;\n}\nfunction get(object, path) {\n  var current = object;\n  for (var _i = 0, _a = path.split('.'); _i < _a.length; _i++) {\n    var field = _a[_i];\n    if (!isValidObjectContaining(current, field)) {\n      return;\n    }\n    current = current[field];\n  }\n  return current;\n}\nfunction set(object, path, value) {\n  var current = object;\n  var fields = path.split('.');\n  for (var i = 0; i < fields.length; i += 1) {\n    var field = fields[i];\n    if (!isValidObjectContaining(current, field)) {\n      return;\n    }\n    if (i !== fields.length - 1) {\n      current = current[field];\n    } else {\n      current[field] = value;\n    }\n  }\n}\nfunction isValidObjectContaining(object, field) {\n  return typeof object === 'object' && object !== null && field in object;\n}\n/**\n * Similar to `typeof`, but distinguish plain objects from `null` and arrays\n */\nfunction getType(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  return typeof value;\n}","map":{"version":3,"names":["deepClone","limitModification","object","modifiableFieldPaths","modifier","clone","result","forEach","path","originalValue","get","newValue","originalType","getType","newType","set","current","_i","_a","split","length","field","isValidObjectContaining","value","fields","i","Array","isArray"],"sources":["../../src/tools/limitModification.ts"],"sourcesContent":[null],"mappings":"AAAA,SAAkBA,SAAS,QAAQ,WAAW;AAE9C;;;;AAIA,OAAM,SAAUC,iBAAiBA,CAC/BC,MAAS,EACTC,oBAA8B,EAC9BC,QAA+B;EAE/B,IAAMC,KAAK,GAAGL,SAAS,CAACE,MAAM,CAAC;EAC/B,IAAMI,MAAM,GAAGF,QAAQ,CAACC,KAAK,CAAC;EAC9BF,oBAAoB,CAACI,OAAO,CAAC,UAACC,IAAI;IAChC,IAAMC,aAAa,GAAGC,GAAG,CAACR,MAAM,EAAEM,IAAI,CAAC;IACvC,IAAMG,QAAQ,GAAGD,GAAG,CAACL,KAAK,EAAEG,IAAI,CAAC;IACjC,IAAMI,YAAY,GAAGC,OAAO,CAACJ,aAAa,CAAC;IAC3C,IAAMK,OAAO,GAAGD,OAAO,CAACF,QAAQ,CAAC;IACjC,IAAIG,OAAO,KAAKF,YAAY,EAAE;MAC5BG,GAAG,CAACb,MAAM,EAAEM,IAAI,EAAEG,QAAQ,CAAC;KAC5B,MAAM,IAAIC,YAAY,KAAK,QAAQ,KAAKE,OAAO,KAAK,WAAW,IAAIA,OAAO,KAAK,MAAM,CAAC,EAAE;MACvFC,GAAG,CAACb,MAAM,EAAEM,IAAI,EAAE,EAAE,CAAC;;EAEzB,CAAC,CAAC;EACF,OAAOF,MAAM;AACf;AAEA,SAASI,GAAGA,CAACR,MAAe,EAAEM,IAAY;EACxC,IAAIQ,OAAO,GAAGd,MAAM;EACpB,KAAoB,IAAAe,EAAA,IAAe,EAAfC,EAAA,GAAAV,IAAI,CAACW,KAAK,CAAC,GAAG,CAAC,EAAfF,EAAA,GAAAC,EAAA,CAAAE,MAAe,EAAfH,EAAA,EAAe,EAAE;IAAhC,IAAMI,KAAK,GAAAH,EAAA,CAAAD,EAAA;IACd,IAAI,CAACK,uBAAuB,CAACN,OAAO,EAAEK,KAAK,CAAC,EAAE;MAC5C;;IAEFL,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;;EAE1B,OAAOL,OAAO;AAChB;AAEA,SAASD,GAAGA,CAACb,MAAe,EAAEM,IAAY,EAAEe,KAAc;EACxD,IAAIP,OAAO,GAAGd,MAAM;EACpB,IAAMsB,MAAM,GAAGhB,IAAI,CAACW,KAAK,CAAC,GAAG,CAAC;EAC9B,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACJ,MAAM,EAAEK,CAAC,IAAI,CAAC,EAAE;IACzC,IAAMJ,KAAK,GAAGG,MAAM,CAACC,CAAC,CAAC;IACvB,IAAI,CAACH,uBAAuB,CAACN,OAAO,EAAEK,KAAK,CAAC,EAAE;MAC5C;;IAEF,IAAII,CAAC,KAAKD,MAAM,CAACJ,MAAM,GAAG,CAAC,EAAE;MAC3BJ,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;KACzB,MAAM;MACLL,OAAO,CAACK,KAAK,CAAC,GAAGE,KAAK;;;AAG5B;AAEA,SAASD,uBAAuBA,CAACpB,MAAe,EAAEmB,KAAa;EAC7D,OAAO,OAAOnB,MAAM,KAAK,QAAQ,IAAIA,MAAM,KAAK,IAAI,IAAImB,KAAK,IAAInB,MAAM;AACzE;AAEA;;;AAGA,SAASW,OAAOA,CAACU,KAAc;EAC7B,IAAIA,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,MAAM;;EAEf,IAAIG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;IACxB,OAAO,OAAO;;EAEhB,OAAO,OAAOA,KAAK;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module"}