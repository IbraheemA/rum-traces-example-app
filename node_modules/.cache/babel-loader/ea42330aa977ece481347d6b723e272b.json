{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { resetFetchProxy, startFetchProxy } from '../browser/fetchProxy';\nimport { resetXhrProxy, startXhrProxy } from '../browser/xhrProxy';\nimport { ErrorSource, formatUnknownError, toStackTraceString, formatErrorMessage, ErrorHandling } from '../tools/error';\nimport { Observable } from '../tools/observable';\nimport { clocksNow } from '../tools/timeUtils';\nimport { jsonStringify, RequestType, find } from '../tools/utils';\nimport { monitor } from './internalMonitoring';\nimport { computeStackTrace, subscribe, unsubscribe } from './tracekit';\nvar errorObservable;\nexport function startAutomaticErrorCollection(configuration) {\n  if (!errorObservable) {\n    errorObservable = new Observable();\n    trackNetworkError(configuration, errorObservable);\n    startConsoleTracking(errorObservable);\n    startRuntimeErrorTracking(errorObservable);\n  }\n  return errorObservable;\n}\nvar originalConsoleError;\n/* eslint-disable no-console */\nexport function startConsoleTracking(errorObservable) {\n  originalConsoleError = console.error;\n  console.error = monitor(function () {\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    originalConsoleError.apply(console, params);\n    errorObservable.notify(__assign(__assign({}, buildErrorFromParams(params)), {\n      source: ErrorSource.CONSOLE,\n      startClocks: clocksNow(),\n      handling: ErrorHandling.HANDLED\n    }));\n  });\n}\nexport function stopConsoleTracking() {\n  console.error = originalConsoleError;\n}\n/* eslint-enable no-console */\nfunction buildErrorFromParams(params) {\n  var firstErrorParam = find(params, function (param) {\n    return param instanceof Error;\n  });\n  return {\n    message: __spreadArrays(['console error:'], params).map(function (param) {\n      return formatConsoleParameters(param);\n    }).join(' '),\n    stack: firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined\n  };\n}\nfunction formatConsoleParameters(param) {\n  if (typeof param === 'string') {\n    return param;\n  }\n  if (param instanceof Error) {\n    return formatErrorMessage(computeStackTrace(param));\n  }\n  return jsonStringify(param, undefined, 2);\n}\nvar traceKitReportHandler;\nexport function startRuntimeErrorTracking(errorObservable) {\n  traceKitReportHandler = function (stackTrace, _, errorObject) {\n    var _a = formatUnknownError(stackTrace, errorObject, 'Uncaught'),\n      stack = _a.stack,\n      message = _a.message,\n      type = _a.type;\n    errorObservable.notify({\n      message: message,\n      stack: stack,\n      type: type,\n      source: ErrorSource.SOURCE,\n      startClocks: clocksNow(),\n      originalError: errorObject,\n      handling: ErrorHandling.UNHANDLED\n    });\n  };\n  subscribe(traceKitReportHandler);\n}\nexport function stopRuntimeErrorTracking() {\n  unsubscribe(traceKitReportHandler);\n}\nexport function trackNetworkError(configuration, errorObservable) {\n  startXhrProxy().onRequestComplete(function (context) {\n    return handleCompleteRequest(RequestType.XHR, context);\n  });\n  startFetchProxy().onRequestComplete(function (context) {\n    return handleCompleteRequest(RequestType.FETCH, context);\n  });\n  function handleCompleteRequest(type, request) {\n    if (!configuration.isIntakeUrl(request.url) && (!configuration.isEnabled('remove-network-errors') || !request.isAborted) && (isRejected(request) || isServerError(request))) {\n      errorObservable.notify({\n        message: format(type) + \" error \" + request.method + \" \" + request.url,\n        resource: {\n          method: request.method,\n          statusCode: request.status,\n          url: request.url\n        },\n        source: ErrorSource.NETWORK,\n        stack: truncateResponseText(request.responseText, configuration) || 'Failed to load',\n        startClocks: request.startClocks\n      });\n    }\n  }\n  return {\n    stop: function () {\n      resetXhrProxy();\n      resetFetchProxy();\n    }\n  };\n}\nfunction isRejected(request) {\n  return request.status === 0 && request.responseType !== 'opaque';\n}\nfunction isServerError(request) {\n  return request.status >= 500;\n}\nfunction truncateResponseText(responseText, configuration) {\n  if (responseText && responseText.length > configuration.requestErrorResponseLengthLimit) {\n    return responseText.substring(0, configuration.requestErrorResponseLengthLimit) + \"...\";\n  }\n  return responseText;\n}\nfunction format(type) {\n  if (RequestType.XHR === type) {\n    return 'XHR';\n  }\n  return 'Fetch';\n}","map":{"version":3,"names":["resetFetchProxy","startFetchProxy","resetXhrProxy","startXhrProxy","ErrorSource","formatUnknownError","toStackTraceString","formatErrorMessage","ErrorHandling","Observable","clocksNow","jsonStringify","RequestType","find","monitor","computeStackTrace","subscribe","unsubscribe","errorObservable","startAutomaticErrorCollection","configuration","trackNetworkError","startConsoleTracking","startRuntimeErrorTracking","originalConsoleError","console","error","params","_i","arguments","length","apply","notify","__assign","buildErrorFromParams","source","CONSOLE","startClocks","handling","HANDLED","stopConsoleTracking","firstErrorParam","param","Error","message","__spreadArrays","map","formatConsoleParameters","join","stack","undefined","traceKitReportHandler","stackTrace","_","errorObject","_a","type","SOURCE","originalError","UNHANDLED","stopRuntimeErrorTracking","onRequestComplete","context","handleCompleteRequest","XHR","FETCH","request","isIntakeUrl","url","isEnabled","isAborted","isRejected","isServerError","format","method","resource","statusCode","status","NETWORK","truncateResponseText","responseText","stop","responseType","requestErrorResponseLengthLimit","substring"],"sources":["../../src/domain/automaticErrorCollection.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}