{"ast":null,"code":"'use strict';\n\nconst {\n  trace,\n  context,\n  propagation\n} = require('@opentelemetry/api');\nconst {\n  W3CTraceContextPropagator\n} = require('@opentelemetry/core');\nconst tracer = require('../../');\nconst ContextManager = require('./context_manager');\nconst {\n  MultiSpanProcessor,\n  NoopSpanProcessor\n} = require('./span_processor');\nconst Tracer = require('./tracer');\nclass TracerProvider {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.config = config;\n    this.resource = config.resource;\n    this._processors = [];\n    this._tracers = new Map();\n    this._activeProcessor = new NoopSpanProcessor();\n    this._contextManager = new ContextManager();\n  }\n  getTracer() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'opentelemetry';\n    let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0.0.0';\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    const key = `${name}@${version}`;\n    if (!this._tracers.has(key)) {\n      this._tracers.set(key, new Tracer({\n        ...options,\n        name,\n        version\n      }, this.config, this));\n    }\n    return this._tracers.get(key);\n  }\n  addSpanProcessor(spanProcessor) {\n    if (!this._processors.length) {\n      this._activeProcessor.shutdown();\n    }\n    this._processors.push(spanProcessor);\n    this._activeProcessor = new MultiSpanProcessor(this._processors);\n  }\n  getActiveSpanProcessor() {\n    return this._activeProcessor;\n  }\n\n  // Not actually required by the SDK spec, but the official Node.js SDK does\n  // this and the docs reflect that so we should do this too for familiarity.\n  register() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    context.setGlobalContextManager(this._contextManager);\n    if (!trace.setGlobalTracerProvider(this)) {\n      trace.getTracerProvider().setDelegate(this);\n    }\n    // The default propagator used is the W3C Trace Context propagator, users should be able to pass in others\n    // as needed\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    } else {\n      propagation.setGlobalPropagator(new W3CTraceContextPropagator());\n    }\n  }\n  forceFlush() {\n    const exporter = tracer._tracer._exporter;\n    if (!exporter) {\n      return Promise.reject(new Error('Not started'));\n    }\n    exporter._writer.flush();\n    return this._activeProcessor.forceFlush();\n  }\n  shutdown() {\n    return this._activeProcessor.shutdown();\n  }\n}\nmodule.exports = TracerProvider;","map":{"version":3,"names":["trace","context","propagation","require","W3CTraceContextPropagator","tracer","ContextManager","MultiSpanProcessor","NoopSpanProcessor","Tracer","TracerProvider","constructor","config","arguments","length","undefined","resource","_processors","_tracers","Map","_activeProcessor","_contextManager","getTracer","name","version","options","key","has","set","get","addSpanProcessor","spanProcessor","shutdown","push","getActiveSpanProcessor","register","setGlobalContextManager","setGlobalTracerProvider","getTracerProvider","setDelegate","propagator","setGlobalPropagator","forceFlush","exporter","_tracer","_exporter","Promise","reject","Error","_writer","flush","module","exports"],"sources":["/Users/ibraheem.aboulnaga/rum-traces-example-app/node_modules/dd-trace/packages/dd-trace/src/opentelemetry/tracer_provider.js"],"sourcesContent":["'use strict'\n\nconst { trace, context, propagation } = require('@opentelemetry/api')\nconst { W3CTraceContextPropagator } = require('@opentelemetry/core')\n\nconst tracer = require('../../')\n\nconst ContextManager = require('./context_manager')\nconst { MultiSpanProcessor, NoopSpanProcessor } = require('./span_processor')\nconst Tracer = require('./tracer')\n\nclass TracerProvider {\n  constructor (config = {}) {\n    this.config = config\n    this.resource = config.resource\n\n    this._processors = []\n    this._tracers = new Map()\n    this._activeProcessor = new NoopSpanProcessor()\n    this._contextManager = new ContextManager()\n  }\n\n  getTracer (name = 'opentelemetry', version = '0.0.0', options) {\n    const key = `${name}@${version}`\n    if (!this._tracers.has(key)) {\n      this._tracers.set(key, new Tracer(\n        { ...options, name, version },\n        this.config,\n        this\n      ))\n    }\n    return this._tracers.get(key)\n  }\n\n  addSpanProcessor (spanProcessor) {\n    if (!this._processors.length) {\n      this._activeProcessor.shutdown()\n    }\n    this._processors.push(spanProcessor)\n    this._activeProcessor = new MultiSpanProcessor(\n      this._processors\n    )\n  }\n\n  getActiveSpanProcessor () {\n    return this._activeProcessor\n  }\n\n  // Not actually required by the SDK spec, but the official Node.js SDK does\n  // this and the docs reflect that so we should do this too for familiarity.\n  register (config = {}) {\n    context.setGlobalContextManager(this._contextManager)\n    if (!trace.setGlobalTracerProvider(this)) {\n      trace.getTracerProvider().setDelegate(this)\n    }\n    // The default propagator used is the W3C Trace Context propagator, users should be able to pass in others\n    // as needed\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator)\n    } else {\n      propagation.setGlobalPropagator(new W3CTraceContextPropagator())\n    }\n  }\n\n  forceFlush () {\n    const exporter = tracer._tracer._exporter\n    if (!exporter) {\n      return Promise.reject(new Error('Not started'))\n    }\n\n    exporter._writer.flush()\n    return this._activeProcessor.forceFlush()\n  }\n\n  shutdown () {\n    return this._activeProcessor.shutdown()\n  }\n}\n\nmodule.exports = TracerProvider\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}