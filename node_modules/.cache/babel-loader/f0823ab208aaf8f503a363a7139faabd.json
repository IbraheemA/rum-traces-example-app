{"ast":null,"code":"import { performDraw, startSessionManagement } from '@datadog/browser-core';\nexport var LOGGER_SESSION_KEY = 'logs';\nexport var LoggerTrackingType;\n(function (LoggerTrackingType) {\n  LoggerTrackingType[\"NOT_TRACKED\"] = \"0\";\n  LoggerTrackingType[\"TRACKED\"] = \"1\";\n})(LoggerTrackingType || (LoggerTrackingType = {}));\nexport function startLoggerSession(configuration, areCookieAuthorized) {\n  if (!areCookieAuthorized) {\n    var isTracked_1 = computeTrackingType(configuration) === LoggerTrackingType.TRACKED;\n    return {\n      getId: function () {\n        return undefined;\n      },\n      isTracked: function () {\n        return isTracked_1;\n      }\n    };\n  }\n  var session = startSessionManagement(configuration.cookieOptions, LOGGER_SESSION_KEY, function (rawTrackingType) {\n    return computeSessionState(configuration, rawTrackingType);\n  });\n  return {\n    getId: session.getId,\n    isTracked: function () {\n      return session.getTrackingType() === LoggerTrackingType.TRACKED;\n    }\n  };\n}\nfunction computeTrackingType(configuration) {\n  if (!performDraw(configuration.sampleRate)) {\n    return LoggerTrackingType.NOT_TRACKED;\n  }\n  return LoggerTrackingType.TRACKED;\n}\nfunction computeSessionState(configuration, rawSessionType) {\n  var trackingType = hasValidLoggerSession(rawSessionType) ? rawSessionType : computeTrackingType(configuration);\n  return {\n    trackingType: trackingType,\n    isTracked: trackingType === LoggerTrackingType.TRACKED\n  };\n}\nfunction hasValidLoggerSession(trackingType) {\n  return trackingType === LoggerTrackingType.NOT_TRACKED || trackingType === LoggerTrackingType.TRACKED;\n}","map":{"version":3,"names":["performDraw","startSessionManagement","LOGGER_SESSION_KEY","LoggerTrackingType","startLoggerSession","configuration","areCookieAuthorized","isTracked_1","computeTrackingType","TRACKED","getId","undefined","isTracked","session","cookieOptions","rawTrackingType","computeSessionState","getTrackingType","sampleRate","NOT_TRACKED","rawSessionType","trackingType","hasValidLoggerSession"],"sources":["../../src/domain/loggerSession.ts"],"sourcesContent":[null],"mappings":"AAAA,SAAwBA,WAAW,EAAEC,sBAAsB,QAAQ,uBAAuB;AAE1F,OAAO,IAAMC,kBAAkB,GAAG,MAAM;AAOxC,WAAYC,kBAGX;AAHD,WAAYA,kBAAkB;EAC5BA,kBAAA,qBAAiB;EACjBA,kBAAA,iBAAa;AACf,CAAC,EAHWA,kBAAkB,KAAlBA,kBAAkB;AAK9B,OAAM,SAAUC,kBAAkBA,CAACC,aAA4B,EAAEC,mBAA4B;EAC3F,IAAI,CAACA,mBAAmB,EAAE;IACxB,IAAMC,WAAS,GAAGC,mBAAmB,CAACH,aAAa,CAAC,KAAKF,kBAAkB,CAACM,OAAO;IACnF,OAAO;MACLC,KAAK,EAAE,SAAAA,CAAA;QAAM,OAAAC,SAAS;MAAT,CAAS;MACtBC,SAAS,EAAE,SAAAA,CAAA;QAAM,OAAAL,WAAS;MAAT;KAClB;;EAEH,IAAMM,OAAO,GAAGZ,sBAAsB,CAACI,aAAa,CAACS,aAAa,EAAEZ,kBAAkB,EAAE,UAACa,eAAe;IACtG,OAAAC,mBAAmB,CAACX,aAAa,EAAEU,eAAe,CAAC;EAAnD,CAAmD,CACpD;EACD,OAAO;IACLL,KAAK,EAAEG,OAAO,CAACH,KAAK;IACpBE,SAAS,EAAE,SAAAA,CAAA;MAAM,OAAAC,OAAO,CAACI,eAAe,EAAE,KAAKd,kBAAkB,CAACM,OAAO;IAAxD;GAClB;AACH;AAEA,SAASD,mBAAmBA,CAACH,aAA4B;EACvD,IAAI,CAACL,WAAW,CAACK,aAAa,CAACa,UAAU,CAAC,EAAE;IAC1C,OAAOf,kBAAkB,CAACgB,WAAW;;EAEvC,OAAOhB,kBAAkB,CAACM,OAAO;AACnC;AAEA,SAASO,mBAAmBA,CAACX,aAA4B,EAAEe,cAAuB;EAChF,IAAMC,YAAY,GAAGC,qBAAqB,CAACF,cAAc,CAAC,GAAGA,cAAc,GAAGZ,mBAAmB,CAACH,aAAa,CAAC;EAChH,OAAO;IACLgB,YAAY,EAAAA,YAAA;IACZT,SAAS,EAAES,YAAY,KAAKlB,kBAAkB,CAACM;GAChD;AACH;AAEA,SAASa,qBAAqBA,CAACD,YAAqB;EAClD,OAAOA,YAAY,KAAKlB,kBAAkB,CAACgB,WAAW,IAAIE,YAAY,KAAKlB,kBAAkB,CAACM,OAAO;AACvG","ignoreList":[]},"metadata":{},"sourceType":"module"}