{"ast":null,"code":"'use strict';\n\nconst api = require('@opentelemetry/api');\nconst {\n  AUTO_KEEP\n} = require('../../../../ext/priority');\nconst DatadogSpanContext = require('../opentracing/span_context');\nconst id = require('../id');\nfunction newContext() {\n  const spanId = id();\n  return new DatadogSpanContext({\n    traceId: spanId,\n    spanId\n  });\n}\nclass SpanContext {\n  constructor(context) {\n    if (!(context instanceof DatadogSpanContext)) {\n      context = context ? new DatadogSpanContext(context) : newContext();\n    }\n    this._ddContext = context;\n  }\n  get traceId() {\n    return this._ddContext.toTraceId(true);\n  }\n  get spanId() {\n    return this._ddContext.toSpanId(true);\n  }\n  get traceFlags() {\n    return this._ddContext._sampling.priority >= AUTO_KEEP ? 1 : 0;\n  }\n  get traceState() {\n    const ts = this._ddContext._tracestate;\n    return api.createTraceState(ts ? ts.toString() : '');\n  }\n}\nmodule.exports = SpanContext;","map":{"version":3,"names":["api","require","AUTO_KEEP","DatadogSpanContext","id","newContext","spanId","traceId","SpanContext","constructor","context","_ddContext","toTraceId","toSpanId","traceFlags","_sampling","priority","traceState","ts","_tracestate","createTraceState","toString","module","exports"],"sources":["/Users/ibraheem.aboulnaga/rum-traces-example-app/node_modules/dd-trace/packages/dd-trace/src/opentelemetry/span_context.js"],"sourcesContent":["'use strict'\n\nconst api = require('@opentelemetry/api')\nconst { AUTO_KEEP } = require('../../../../ext/priority')\nconst DatadogSpanContext = require('../opentracing/span_context')\nconst id = require('../id')\n\nfunction newContext () {\n  const spanId = id()\n  return new DatadogSpanContext({\n    traceId: spanId,\n    spanId\n  })\n}\n\nclass SpanContext {\n  constructor (context) {\n    if (!(context instanceof DatadogSpanContext)) {\n      context = context\n        ? new DatadogSpanContext(context)\n        : newContext()\n    }\n    this._ddContext = context\n  }\n\n  get traceId () {\n    return this._ddContext.toTraceId(true)\n  }\n\n  get spanId () {\n    return this._ddContext.toSpanId(true)\n  }\n\n  get traceFlags () {\n    return this._ddContext._sampling.priority >= AUTO_KEEP ? 1 : 0\n  }\n\n  get traceState () {\n    const ts = this._ddContext._tracestate\n    return api.createTraceState(ts ? ts.toString() : '')\n  }\n}\n\nmodule.exports = SpanContext\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACzC,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACzD,MAAME,kBAAkB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AACjE,MAAMG,EAAE,GAAGH,OAAO,CAAC,OAAO,CAAC;AAE3B,SAASI,UAAUA,CAAA,EAAI;EACrB,MAAMC,MAAM,GAAGF,EAAE,CAAC,CAAC;EACnB,OAAO,IAAID,kBAAkB,CAAC;IAC5BI,OAAO,EAAED,MAAM;IACfA;EACF,CAAC,CAAC;AACJ;AAEA,MAAME,WAAW,CAAC;EAChBC,WAAWA,CAAEC,OAAO,EAAE;IACpB,IAAI,EAAEA,OAAO,YAAYP,kBAAkB,CAAC,EAAE;MAC5CO,OAAO,GAAGA,OAAO,GACb,IAAIP,kBAAkB,CAACO,OAAO,CAAC,GAC/BL,UAAU,CAAC,CAAC;IAClB;IACA,IAAI,CAACM,UAAU,GAAGD,OAAO;EAC3B;EAEA,IAAIH,OAAOA,CAAA,EAAI;IACb,OAAO,IAAI,CAACI,UAAU,CAACC,SAAS,CAAC,IAAI,CAAC;EACxC;EAEA,IAAIN,MAAMA,CAAA,EAAI;IACZ,OAAO,IAAI,CAACK,UAAU,CAACE,QAAQ,CAAC,IAAI,CAAC;EACvC;EAEA,IAAIC,UAAUA,CAAA,EAAI;IAChB,OAAO,IAAI,CAACH,UAAU,CAACI,SAAS,CAACC,QAAQ,IAAId,SAAS,GAAG,CAAC,GAAG,CAAC;EAChE;EAEA,IAAIe,UAAUA,CAAA,EAAI;IAChB,MAAMC,EAAE,GAAG,IAAI,CAACP,UAAU,CAACQ,WAAW;IACtC,OAAOnB,GAAG,CAACoB,gBAAgB,CAACF,EAAE,GAAGA,EAAE,CAACG,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;EACtD;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGf,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script"}