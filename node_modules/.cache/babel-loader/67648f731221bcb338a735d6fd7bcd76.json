{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { addEventListeners, elapsed, ONE_DAY, addMonitoringMessage, relativeNow, timeStampNow } from '@datadog/browser-core';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { trackFirstHidden } from './trackFirstHidden';\nexport function trackInitialViewTimings(lifeCycle, callback) {\n  var timings;\n  function setTimings(newTimings) {\n    timings = __assign(__assign({}, timings), newTimings);\n    callback(timings);\n  }\n  var stopNavigationTracking = trackNavigationTimings(lifeCycle, setTimings).stop;\n  var stopFCPTracking = trackFirstContentfulPaint(lifeCycle, function (firstContentfulPaint) {\n    return setTimings({\n      firstContentfulPaint: firstContentfulPaint\n    });\n  }).stop;\n  var stopLCPTracking = trackLargestContentfulPaint(lifeCycle, window, function (largestContentfulPaint) {\n    setTimings({\n      largestContentfulPaint: largestContentfulPaint\n    });\n  }).stop;\n  var stopFIDTracking = trackFirstInputTimings(lifeCycle, function (_a) {\n    var firstInputDelay = _a.firstInputDelay,\n      firstInputTime = _a.firstInputTime;\n    setTimings({\n      firstInputDelay: firstInputDelay,\n      firstInputTime: firstInputTime\n    });\n  }).stop;\n  return {\n    stop: function () {\n      stopNavigationTracking();\n      stopFCPTracking();\n      stopLCPTracking();\n      stopFIDTracking();\n    }\n  };\n}\nexport function trackNavigationTimings(lifeCycle, callback) {\n  var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'navigation') {\n      callback({\n        domComplete: entry.domComplete,\n        domContentLoaded: entry.domContentLoadedEventEnd,\n        domInteractive: entry.domInteractive,\n        loadEvent: entry.loadEventEnd\n      });\n    }\n  }).unsubscribe;\n  return {\n    stop: stop\n  };\n}\nexport function trackFirstContentfulPaint(lifeCycle, callback) {\n  var firstHidden = trackFirstHidden();\n  var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint' && entry.startTime < firstHidden.timeStamp) {\n      if (entry.startTime > ONE_DAY) {\n        addMonitoringMessage('FCP > 1 day', {\n          debug: {\n            fcp: Math.round(entry.startTime),\n            relativeNow: Math.round(relativeNow()),\n            timeStampNow: timeStampNow()\n          }\n        });\n      }\n      callback(entry.startTime);\n    }\n  }).unsubscribe;\n  return {\n    stop: stop\n  };\n}\n/**\n * Track the largest contentful paint (LCP) occurring during the initial View.  This can yield\n * multiple values, only the most recent one should be used.\n * Documentation: https://web.dev/lcp/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/master/src/getLCP.ts\n */\nexport function trackLargestContentfulPaint(lifeCycle, emitter, callback) {\n  var firstHidden = trackFirstHidden();\n  // Ignore entries that come after the first user interaction.  According to the documentation, the\n  // browser should not send largest-contentful-paint entries after a user interact with the page,\n  // but the web-vitals reference implementation uses this as a safeguard.\n  var firstInteractionTimestamp = Infinity;\n  var stopEventListener = addEventListeners(emitter, [\"pointerdown\" /* POINTER_DOWN */, \"keydown\" /* KEY_DOWN */], function (event) {\n    firstInteractionTimestamp = event.timeStamp;\n  }, {\n    capture: true,\n    once: true\n  }).stop;\n  var unsubscribeLifeCycle = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'largest-contentful-paint' && entry.startTime < firstInteractionTimestamp && entry.startTime < firstHidden.timeStamp) {\n      if (entry.startTime > ONE_DAY) {\n        addMonitoringMessage('LCP > 1 day', {\n          debug: {\n            lcp: Math.round(entry.startTime),\n            relativeNow: Math.round(relativeNow()),\n            timeStampNow: timeStampNow()\n          }\n        });\n      }\n      callback(entry.startTime);\n    }\n  }).unsubscribe;\n  return {\n    stop: function () {\n      stopEventListener();\n      unsubscribeLifeCycle();\n    }\n  };\n}\n/**\n * Track the first input occurring during the initial View to return:\n * - First Input Delay\n * - First Input Time\n * Callback is called at most one time.\n * Documentation: https://web.dev/fid/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/master/src/getFID.ts\n */\nexport function trackFirstInputTimings(lifeCycle, callback) {\n  var firstHidden = trackFirstHidden();\n  var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'first-input' && entry.startTime < firstHidden.timeStamp) {\n      var firstInputDelay = elapsed(entry.startTime, entry.processingStart);\n      callback({\n        // Ensure firstInputDelay to be positive, see\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1185815\n        firstInputDelay: firstInputDelay >= 0 ? firstInputDelay : 0,\n        firstInputTime: entry.startTime\n      });\n    }\n  }).unsubscribe;\n  return {\n    stop: stop\n  };\n}","map":{"version":3,"names":["addEventListeners","elapsed","ONE_DAY","addMonitoringMessage","relativeNow","timeStampNow","LifeCycleEventType","trackFirstHidden","trackInitialViewTimings","lifeCycle","callback","timings","setTimings","newTimings","__assign","stopNavigationTracking","trackNavigationTimings","stop","stopFCPTracking","trackFirstContentfulPaint","firstContentfulPaint","stopLCPTracking","trackLargestContentfulPaint","window","largestContentfulPaint","stopFIDTracking","trackFirstInputTimings","_a","firstInputDelay","firstInputTime","subscribe","PERFORMANCE_ENTRY_COLLECTED","entry","entryType","domComplete","domContentLoaded","domContentLoadedEventEnd","domInteractive","loadEvent","loadEventEnd","unsubscribe","firstHidden","name","startTime","timeStamp","debug","fcp","Math","round","emitter","firstInteractionTimestamp","Infinity","stopEventListener","event","capture","once","unsubscribeLifeCycle","lcp","processingStart"],"sources":["../../../../src/domain/rumEventsCollection/view/trackInitialViewTimings.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}