{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getCurrentSite } from '../browser/cookie';\nimport { catchUserErrors } from '../tools/catchUserErrors';\nimport { includes, ONE_KILO_BYTE, ONE_SECOND } from '../tools/utils';\nimport { computeTransportConfiguration } from './transportConfiguration';\nexport var DEFAULT_CONFIGURATION = {\n  allowedTracingOrigins: [],\n  maxErrorsByMinute: 3000,\n  maxInternalMonitoringMessagesPerPage: 15,\n  resourceSampleRate: 100,\n  sampleRate: 100,\n  silentMultipleInit: false,\n  trackInteractions: false,\n  trackViewsManually: false,\n  /**\n   * arbitrary value, byte precision not needed\n   */\n  requestErrorResponseLengthLimit: 32 * ONE_KILO_BYTE,\n  /**\n   * flush automatically, aim to be lower than ALB connection timeout\n   * to maximize connection reuse.\n   */\n  flushTimeout: 30 * ONE_SECOND,\n  /**\n   * Logs intake limit\n   */\n  maxBatchSize: 50,\n  maxMessageSize: 256 * ONE_KILO_BYTE,\n  /**\n   * beacon payload max queue size implementation is 64kb\n   * ensure that we leave room for logs, rum and potential other users\n   */\n  batchBytesLimit: 16 * ONE_KILO_BYTE\n};\nexport function buildConfiguration(userConfiguration, buildEnv) {\n  var enableExperimentalFeatures = Array.isArray(userConfiguration.enableExperimentalFeatures) ? userConfiguration.enableExperimentalFeatures : [];\n  var configuration = __assign(__assign({\n    beforeSend: userConfiguration.beforeSend && catchUserErrors(userConfiguration.beforeSend, 'beforeSend threw an error:'),\n    cookieOptions: buildCookieOptions(userConfiguration),\n    isEnabled: function (feature) {\n      return includes(enableExperimentalFeatures, feature);\n    },\n    service: userConfiguration.service\n  }, computeTransportConfiguration(userConfiguration, buildEnv)), DEFAULT_CONFIGURATION);\n  if ('allowedTracingOrigins' in userConfiguration) {\n    configuration.allowedTracingOrigins = userConfiguration.allowedTracingOrigins;\n  }\n  if ('sampleRate' in userConfiguration) {\n    configuration.sampleRate = userConfiguration.sampleRate;\n  }\n  if ('resourceSampleRate' in userConfiguration) {\n    configuration.resourceSampleRate = userConfiguration.resourceSampleRate;\n  }\n  if ('trackInteractions' in userConfiguration) {\n    configuration.trackInteractions = !!userConfiguration.trackInteractions;\n  }\n  if ('trackViewsManually' in userConfiguration) {\n    configuration.trackViewsManually = !!userConfiguration.trackViewsManually;\n  }\n  return configuration;\n}\nexport function buildCookieOptions(userConfiguration) {\n  var cookieOptions = {};\n  cookieOptions.secure = mustUseSecureCookie(userConfiguration);\n  cookieOptions.crossSite = !!userConfiguration.useCrossSiteSessionCookie;\n  if (!!userConfiguration.trackSessionAcrossSubdomains) {\n    cookieOptions.domain = getCurrentSite();\n  }\n  return cookieOptions;\n}\nfunction mustUseSecureCookie(userConfiguration) {\n  return !!userConfiguration.useSecureSessionCookie || !!userConfiguration.useCrossSiteSessionCookie;\n}","map":{"version":3,"names":["getCurrentSite","catchUserErrors","includes","ONE_KILO_BYTE","ONE_SECOND","computeTransportConfiguration","DEFAULT_CONFIGURATION","allowedTracingOrigins","maxErrorsByMinute","maxInternalMonitoringMessagesPerPage","resourceSampleRate","sampleRate","silentMultipleInit","trackInteractions","trackViewsManually","requestErrorResponseLengthLimit","flushTimeout","maxBatchSize","maxMessageSize","batchBytesLimit","buildConfiguration","userConfiguration","buildEnv","enableExperimentalFeatures","Array","isArray","configuration","__assign","beforeSend","cookieOptions","buildCookieOptions","isEnabled","feature","service","secure","mustUseSecureCookie","crossSite","useCrossSiteSessionCookie","trackSessionAcrossSubdomains","domain","useSecureSessionCookie"],"sources":["../../src/domain/configuration.ts"],"sourcesContent":[null],"mappings":";AACA,SAAwBA,cAAc,QAAQ,mBAAmB;AACjE,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,QAAQ,EAAEC,aAAa,EAAEC,UAAU,QAAQ,gBAAgB;AACpE,SAASC,6BAA6B,QAAoB,0BAA0B;AAEpF,OAAO,IAAMC,qBAAqB,GAAG;EACnCC,qBAAqB,EAAE,EAA4B;EACnDC,iBAAiB,EAAE,IAAI;EACvBC,oCAAoC,EAAE,EAAE;EACxCC,kBAAkB,EAAE,GAAG;EACvBC,UAAU,EAAE,GAAG;EACfC,kBAAkB,EAAE,KAAK;EACzBC,iBAAiB,EAAE,KAAK;EACxBC,kBAAkB,EAAE,KAAK;EAEzB;;;EAGAC,+BAA+B,EAAE,EAAE,GAAGZ,aAAa;EAEnD;;;;EAIAa,YAAY,EAAE,EAAE,GAAGZ,UAAU;EAE7B;;;EAGAa,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,GAAG,GAAGf,aAAa;EAEnC;;;;EAIAgB,eAAe,EAAE,EAAE,GAAGhB;CACvB;AAoED,OAAM,SAAUiB,kBAAkBA,CAACC,iBAAoC,EAAEC,QAAkB;EACzF,IAAMC,0BAA0B,GAAGC,KAAK,CAACC,OAAO,CAACJ,iBAAiB,CAACE,0BAA0B,CAAC,GAC1FF,iBAAiB,CAACE,0BAA0B,GAC5C,EAAE;EAEN,IAAMG,aAAa,GAAAC,QAAA,CAAAA,QAAA;IACjBC,UAAU,EACRP,iBAAiB,CAACO,UAAU,IAAI3B,eAAe,CAACoB,iBAAiB,CAACO,UAAU,EAAE,4BAA4B,CAAC;IAC7GC,aAAa,EAAEC,kBAAkB,CAACT,iBAAiB,CAAC;IACpDU,SAAS,EAAE,SAAAA,CAACC,OAAe;MAAK,OAAA9B,QAAQ,CAACqB,0BAA0B,EAAES,OAAO,CAAC;IAA7C,CAA6C;IAC7EC,OAAO,EAAEZ,iBAAiB,CAACY;EAAO,GAC/B5B,6BAA6B,CAACgB,iBAAiB,EAAEC,QAAQ,CAAC,GAC1DhB,qBAAqB,CACzB;EAED,IAAI,uBAAuB,IAAIe,iBAAiB,EAAE;IAChDK,aAAa,CAACnB,qBAAqB,GAAGc,iBAAiB,CAACd,qBAAsB;;EAGhF,IAAI,YAAY,IAAIc,iBAAiB,EAAE;IACrCK,aAAa,CAACf,UAAU,GAAGU,iBAAiB,CAACV,UAAW;;EAG1D,IAAI,oBAAoB,IAAIU,iBAAiB,EAAE;IAC7CK,aAAa,CAAChB,kBAAkB,GAAGW,iBAAiB,CAACX,kBAAmB;;EAG1E,IAAI,mBAAmB,IAAIW,iBAAiB,EAAE;IAC5CK,aAAa,CAACb,iBAAiB,GAAG,CAAC,CAACQ,iBAAiB,CAACR,iBAAiB;;EAGzE,IAAI,oBAAoB,IAAIQ,iBAAiB,EAAE;IAC7CK,aAAa,CAACZ,kBAAkB,GAAG,CAAC,CAACO,iBAAiB,CAACP,kBAAkB;;EAG3E,OAAOY,aAAa;AACtB;AAEA,OAAM,SAAUI,kBAAkBA,CAACT,iBAAoC;EACrE,IAAMQ,aAAa,GAAkB,EAAE;EAEvCA,aAAa,CAACK,MAAM,GAAGC,mBAAmB,CAACd,iBAAiB,CAAC;EAC7DQ,aAAa,CAACO,SAAS,GAAG,CAAC,CAACf,iBAAiB,CAACgB,yBAAyB;EAEvE,IAAI,CAAC,CAAChB,iBAAiB,CAACiB,4BAA4B,EAAE;IACpDT,aAAa,CAACU,MAAM,GAAGvC,cAAc,EAAE;;EAGzC,OAAO6B,aAAa;AACtB;AAEA,SAASM,mBAAmBA,CAACd,iBAAoC;EAC/D,OAAO,CAAC,CAACA,iBAAiB,CAACmB,sBAAsB,IAAI,CAAC,CAACnB,iBAAiB,CAACgB,yBAAyB;AACpG","ignoreList":[]},"metadata":{},"sourceType":"module"}