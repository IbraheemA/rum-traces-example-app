{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar Transform = require('stream').Transform;\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar inherits = require('inherits');\nfunction CipherBase(hashMode) {\n  Transform.call(this);\n  this.hashMode = typeof hashMode === 'string';\n  if (this.hashMode) {\n    this[hashMode] = this._finalOrDigest;\n  } else {\n    this['final'] = this._finalOrDigest;\n  }\n  if (this._final) {\n    this.__final = this._final;\n    this._final = null;\n  }\n  this._decoder = null;\n  this._encoding = null;\n}\ninherits(CipherBase, Transform);\nvar useUint8Array = typeof Uint8Array !== 'undefined';\nvar useArrayBuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && ArrayBuffer.isView && (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  var bufferData;\n  if (data instanceof Buffer) {\n    // No need to do anything\n    bufferData = data;\n  } else if (typeof data === 'string') {\n    // Convert strings to Buffer\n    bufferData = Buffer.from(data, inputEnc);\n  } else if (useArrayBuffer && ArrayBuffer.isView(data)) {\n    /*\n     * Wrap any TypedArray instances and DataViews\n     * Makes sense only on engines with full TypedArray support -- let Buffer detect that\n     */\n    bufferData = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else if (useUint8Array && data instanceof Uint8Array) {\n    /*\n     * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over\n     * Doesn't make sense with other TypedArray instances\n     */\n    bufferData = Buffer.from(data);\n  } else if (Buffer.isBuffer(data) && data.constructor && data.constructor.isBuffer && data.constructor.isBuffer(data)) {\n    /*\n     * Old Buffer polyfill on an engine that doesn't have TypedArray support\n     * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed\n     * Convert to our current Buffer implementation\n     */\n    bufferData = Buffer.from(data);\n  } else {\n    throw new Error('The \"data\" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');\n  }\n  var outData = this._update(bufferData);\n  if (this.hashMode) {\n    return this;\n  }\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc);\n  }\n  return outData;\n};\nCipherBase.prototype.setAutoPadding = function () {};\nCipherBase.prototype.getAuthTag = function () {\n  throw new Error('trying to get auth tag in unsupported state');\n};\nCipherBase.prototype.setAuthTag = function () {\n  throw new Error('trying to set auth tag in unsupported state');\n};\nCipherBase.prototype.setAAD = function () {\n  throw new Error('trying to set aad in unsupported state');\n};\nCipherBase.prototype._transform = function (data, _, next) {\n  var err;\n  try {\n    if (this.hashMode) {\n      this._update(data);\n    } else {\n      this.push(this._update(data));\n    }\n  } catch (e) {\n    err = e;\n  } finally {\n    next(err);\n  }\n};\nCipherBase.prototype._flush = function (done) {\n  var err;\n  try {\n    this.push(this.__final());\n  } catch (e) {\n    err = e;\n  }\n  done(err);\n};\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n  var outData = this.__final() || Buffer.alloc(0);\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc, true);\n  }\n  return outData;\n};\nCipherBase.prototype._toString = function (value, enc, fin) {\n  if (!this._decoder) {\n    this._decoder = new StringDecoder(enc);\n    this._encoding = enc;\n  }\n  if (this._encoding !== enc) {\n    throw new Error('can’t switch encodings');\n  }\n  var out = this._decoder.write(value);\n  if (fin) {\n    out += this._decoder.end();\n  }\n  return out;\n};\nmodule.exports = CipherBase;","map":{"version":3,"names":["Buffer","require","Transform","StringDecoder","inherits","CipherBase","hashMode","call","_finalOrDigest","_final","__final","_decoder","_encoding","useUint8Array","Uint8Array","useArrayBuffer","ArrayBuffer","isView","prototype","TYPED_ARRAY_SUPPORT","update","data","inputEnc","outputEnc","bufferData","from","buffer","byteOffset","byteLength","isBuffer","constructor","Error","outData","_update","_toString","setAutoPadding","getAuthTag","setAuthTag","setAAD","_transform","_","next","err","push","e","_flush","done","alloc","value","enc","fin","out","write","end","module","exports"],"sources":["/Users/ibraheem.aboulnaga/rum-traces-example-app/node_modules/cipher-base/index.js"],"sourcesContent":["'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar Transform = require('stream').Transform;\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar inherits = require('inherits');\n\nfunction CipherBase(hashMode) {\n\tTransform.call(this);\n\tthis.hashMode = typeof hashMode === 'string';\n\tif (this.hashMode) {\n\t\tthis[hashMode] = this._finalOrDigest;\n\t} else {\n\t\tthis['final'] = this._finalOrDigest;\n\t}\n\tif (this._final) {\n\t\tthis.__final = this._final;\n\t\tthis._final = null;\n\t}\n\tthis._decoder = null;\n\tthis._encoding = null;\n}\ninherits(CipherBase, Transform);\n\nvar useUint8Array = typeof Uint8Array !== 'undefined';\nvar useArrayBuffer = typeof ArrayBuffer !== 'undefined'\n\t&& typeof Uint8Array !== 'undefined'\n\t&& ArrayBuffer.isView\n\t&& (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);\n\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n\tvar bufferData;\n\tif (data instanceof Buffer) {\n\t\t// No need to do anything\n\t\tbufferData = data;\n\t} else if (typeof data === 'string') {\n\t\t// Convert strings to Buffer\n\t\tbufferData = Buffer.from(data, inputEnc);\n\t} else if (useArrayBuffer && ArrayBuffer.isView(data)) {\n\t\t/*\n\t\t * Wrap any TypedArray instances and DataViews\n\t\t * Makes sense only on engines with full TypedArray support -- let Buffer detect that\n\t\t */\n\t\tbufferData = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n\t} else if (useUint8Array && data instanceof Uint8Array) {\n\t\t/*\n\t\t * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over\n\t\t * Doesn't make sense with other TypedArray instances\n\t\t */\n\t\tbufferData = Buffer.from(data);\n\t} else if (\n\t\tBuffer.isBuffer(data)\n\t\t&& data.constructor\n\t\t&& data.constructor.isBuffer\n\t\t&& data.constructor.isBuffer(data)\n\t) {\n\t\t/*\n\t\t * Old Buffer polyfill on an engine that doesn't have TypedArray support\n\t\t * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed\n\t\t * Convert to our current Buffer implementation\n\t\t */\n\t\tbufferData = Buffer.from(data);\n\t} else {\n\t\tthrow new Error('The \"data\" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');\n\t}\n\n\tvar outData = this._update(bufferData);\n\tif (this.hashMode) {\n\t\treturn this;\n\t}\n\n\tif (outputEnc) {\n\t\toutData = this._toString(outData, outputEnc);\n\t}\n\n\treturn outData;\n};\n\nCipherBase.prototype.setAutoPadding = function () {};\nCipherBase.prototype.getAuthTag = function () {\n\tthrow new Error('trying to get auth tag in unsupported state');\n};\n\nCipherBase.prototype.setAuthTag = function () {\n\tthrow new Error('trying to set auth tag in unsupported state');\n};\n\nCipherBase.prototype.setAAD = function () {\n\tthrow new Error('trying to set aad in unsupported state');\n};\n\nCipherBase.prototype._transform = function (data, _, next) {\n\tvar err;\n\ttry {\n\t\tif (this.hashMode) {\n\t\t\tthis._update(data);\n\t\t} else {\n\t\t\tthis.push(this._update(data));\n\t\t}\n\t} catch (e) {\n\t\terr = e;\n\t} finally {\n\t\tnext(err);\n\t}\n};\nCipherBase.prototype._flush = function (done) {\n\tvar err;\n\ttry {\n\t\tthis.push(this.__final());\n\t} catch (e) {\n\t\terr = e;\n\t}\n\n\tdone(err);\n};\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n\tvar outData = this.__final() || Buffer.alloc(0);\n\tif (outputEnc) {\n\t\toutData = this._toString(outData, outputEnc, true);\n\t}\n\treturn outData;\n};\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n\tif (!this._decoder) {\n\t\tthis._decoder = new StringDecoder(enc);\n\t\tthis._encoding = enc;\n\t}\n\n\tif (this._encoding !== enc) {\n\t\tthrow new Error('can’t switch encodings');\n\t}\n\n\tvar out = this._decoder.write(value);\n\tif (fin) {\n\t\tout += this._decoder.end();\n\t}\n\n\treturn out;\n};\n\nmodule.exports = CipherBase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}