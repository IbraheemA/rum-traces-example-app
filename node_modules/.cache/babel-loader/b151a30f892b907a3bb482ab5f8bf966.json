{"ast":null,"code":"import { findCommaSeparatedValue, ONE_MINUTE } from '@datadog/browser-core';\nexport var INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD = 2 * ONE_MINUTE;\nexport function getDocumentTraceId(document) {\n  var data = getDocumentTraceDataFromMeta(document) || getDocumentTraceDataFromComment(document);\n  if (!data || data.traceTime <= Date.now() - INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD) {\n    return undefined;\n  }\n  return data.traceId;\n}\nexport function getDocumentTraceDataFromMeta(document) {\n  var traceIdMeta = document.querySelector('meta[name=dd-trace-id]');\n  var traceTimeMeta = document.querySelector('meta[name=dd-trace-time]');\n  return createDocumentTraceData(traceIdMeta && traceIdMeta.content, traceTimeMeta && traceTimeMeta.content);\n}\nexport function getDocumentTraceDataFromComment(document) {\n  var comment = findTraceComment(document);\n  if (!comment) {\n    return undefined;\n  }\n  return createDocumentTraceData(findCommaSeparatedValue(comment, 'trace-id'), findCommaSeparatedValue(comment, 'trace-time'));\n}\nexport function createDocumentTraceData(traceId, rawTraceTime) {\n  var traceTime = rawTraceTime && Number(rawTraceTime);\n  if (!traceId || !traceTime) {\n    return undefined;\n  }\n  return {\n    traceId: traceId,\n    traceTime: traceTime\n  };\n}\nexport function findTraceComment(document) {\n  // 1. Try to find the comment as a direct child of the document\n  // Note: TSLint advises to use a 'for of', but TS doesn't allow to use 'for of' if the iterated\n  // value is not an array or string (here, a NodeList).\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (var i = 0; i < document.childNodes.length; i += 1) {\n    var comment = getTraceCommentFromNode(document.childNodes[i]);\n    if (comment) {\n      return comment;\n    }\n  }\n  // 2. If the comment is placed after the </html> tag, but have some space or new lines before or\n  // after, the DOM parser will lift it (and the surrounding text) at the end of the <body> tag.\n  // Try to look for the comment at the end of the <body> by by iterating over its child nodes in\n  // reverse order, stopping if we come across a non-text node.\n  if (document.body) {\n    for (var i = document.body.childNodes.length - 1; i >= 0; i -= 1) {\n      var node = document.body.childNodes[i];\n      var comment = getTraceCommentFromNode(node);\n      if (comment) {\n        return comment;\n      }\n      if (!isTextNode(node)) {\n        break;\n      }\n    }\n  }\n}\nfunction getTraceCommentFromNode(node) {\n  if (node && isCommentNode(node)) {\n    var match = /^\\s*DATADOG;(.*?)\\s*$/.exec(node.data);\n    if (match) {\n      return match[1];\n    }\n  }\n}\nfunction isCommentNode(node) {\n  return node.nodeName === '#comment';\n}\nfunction isTextNode(node) {\n  return node.nodeName === '#text';\n}","map":{"version":3,"names":["findCommaSeparatedValue","ONE_MINUTE","INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD","getDocumentTraceId","document","data","getDocumentTraceDataFromMeta","getDocumentTraceDataFromComment","traceTime","Date","now","undefined","traceId","traceIdMeta","querySelector","traceTimeMeta","createDocumentTraceData","content","comment","findTraceComment","rawTraceTime","Number","i","childNodes","length","getTraceCommentFromNode","body","node","isTextNode","isCommentNode","match","exec","nodeName"],"sources":["../../../src/domain/tracing/getDocumentTraceId.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}